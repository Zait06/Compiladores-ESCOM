// Analizador sintactico
package calculadorahoc4;
import java_cup.runtime.*;
import java.io.FileReader;

class AnalizadorSintactico;

parser code {:
    HOC4JFrame frmInterfaz;
    Float variables[] = new Float[26];
    MaquinaHOC4 maquinaHoc4;

    public void report_error(String mensaje, Object info){
        StringBuilder m = new StringBuilder("Error");
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if(s.left >= 0){
                m.append(" en la linea "+(s.left+1));
                if(s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String mssg, Object info){
        report_error(mssg, info);
        // System.exit(1);
    }
:}

terminal opSUMA, opRESTA, opMULT, opDIV, ASIG;
terminal ParIzq, ParDer, ENTER, SEMICOLON;
terminal SymbolHOC NUM;
terminal SymbolHOC VAR;
terminal SymbolHOC BLTIN;
terminal SymbolHOC CONST_PRED;
terminal UMINUS, POW;

non terminal list;
non terminal Integer asgn, expr;

// Precedencias
precedence right ASIG;
precedence left opSUMA, opRESTA;
precedence left opMULT, opDIV;
precedence left UMINUS;
precedence right POW;

list    ::=
        | ENTER
        | list expr SEMICOLON               {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.PRINT;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins2.Instruc = EnumInstrMaq.STOP;

                                                maquinaHoc4.code2(ins1,ins2);
                                            :}
        | list expr SEMICOLON ENTER         {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.PRINT;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins2.Instruc = EnumInstrMaq.STOP;

                                                maquinaHoc4.code2(ins1,ins2);
                                            :}
        ;

asgn    ::= VAR:v ASIG expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = v;

                                                InstrucProgram ins3 =  new InstrucProgram();
                                                ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins3.Instruc = EnumInstrMaq.ASSIGN;

                                                RESULT = maquinaHoc4.code3(ins1,ins2,ins3);
                                            :}
        ;

expr    ::= NUM:n                           {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = n;

                                                RESULT = maquinaHoc4.code2(ins1,ins2);
                                            :}
        | VAR:v                             {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = v;

                                                InstrucProgram ins3 =  new InstrucProgram();
                                                ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins3.Instruc = EnumInstrMaq.EVAL;

                                                RESULT = maquinaHoc4.code3(ins1,ins2,ins3);
                                            :}
        | CONST_PRED:n                      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = n;

                                                RESULT = maquinaHoc4.code2(ins1,ins2);
                                            :}
        | asgn:valAsgn                      {:  RESULT=valAsgn; :}
        | expr opSUMA expr                  {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.ADD;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :}
        | expr opRESTA expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.SUB;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :}
        | expr opMULT expr                  {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.MUL;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :}
        | expr opDIV expr                   {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.DIV;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :}
        | ParIzq expr:e ParDer              {: RESULT=e; :}
        | BLTIN:fun ParIzq expr ParDer      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.BLTIN;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.BLTIN;
                                                ins2.func_BLTIN = fun.FuncPredef;

                                                RESULT = maquinaHoc4.code2(ins1,ins2);
                                            :}
        | opRESTA expr                      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.NEGATE;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :} %prec UMINUS
        | expr POW expr                     {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.POWER;
                                                RESULT = maquinaHoc4.code(ins1);
                                            :}
        ;