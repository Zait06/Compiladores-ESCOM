// Analizador sintactico
package calculadorahoc5;
import java_cup.runtime.*;
import java.io.FileReader;

class AnalizadorSintactico;

parser code {:
    HOC4JFrame frmInterfaz;
    Float variables[] = new Float[26];
    MaquinaHOC maquinaHoc;

    public void report_error(String mensaje, Object info){
        StringBuilder m = new StringBuilder("Error");
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if(s.left >= 0){
                m.append(" en la linea "+(s.left+1));
                if(s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String mssg, Object info){
        report_error(mssg, info);
        // System.exit(1);
    }
:}

terminal opSUMA, opRESTA, opMULT, opDIV, ASIG;
terminal ParIzq, ParDer, ENTER, SEMICOLON;
terminal LLAVE_IZQ, LLAVE_DER;
terminal PRINT, WHILE, IF, ELSE;
terminal SymbolHOC NUM;
terminal SymbolHOC VAR;
terminal SymbolHOC BLTIN;
terminal SymbolHOC CONST_PRED;
terminal UMINUS, POW;
terminal OR, AND, GT, GE, LT, LE, EQ, NE, NOT;

non terminal list;
non terminal Integer asgn, expr, stmt, stmtlist;
non terminal Integer if, while, end, cond;

// Precedencias
precedence right ASIG;
precedence left OR;
precedence left AND;
precedence left GT, GE, LT, LE, EQ, NE;
precedence left opSUMA, opRESTA;
precedence left opMULT, opDIV;
precedence left UMINUS;
precedence right POW;

list    ::=
        | ENTER
        | list stmt                         {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.PRINT;
                                                /*
                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins2.Instruc = EnumInstrMaq.STOP;*/

                                                maquinaHoc.code(ins1);
                                            :}
        ;

asgn    ::= VAR:v ASIG expr:ind1            {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = v;

                                                InstrucProgram ins3 =  new InstrucProgram();
                                                ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins3.Instruc = EnumInstrMaq.ASSIGN;

                                                maquinaHoc.code3(ins1,ins2,ins3);
                                                RESULT = ind1;
                                            :}
        ;

stmt    ::= asgn:ind1 SEMICOLON             {:  RESULT = ind1;  :}
        | PRINT expr:ind1 SEMICOLON         {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.PRINT;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | while:ind1 cond:ind2 stmt:ind3 end:ind4   {:  InstrucProgram ins1 =  new InstrucProgram();
                                                        ins1.TipInstr = EnumTipoInstr.JUMP;
                                                        ins1.jump = ind3;
                                                        maquinaHoc.prog[ind1+1] = ins1;

                                                        InstrucProgram ins2 =  new InstrucProgram();
                                                        ins2.TipInstr = EnumTipoInstr.JUMP;
                                                        ins2.jump = ind4;
                                                        maquinaHoc.prog[ind1+2] = ins2;

                                                        RESULT = ind1;
                                                    :}
        | if cond stmt end
        | if cond stmt end ELSE stmt end
        | LLAVE_IZQ stmtlist LLAVE_DER
        ;

cond    ::= ParIzq expr ParDer
        ;

while   ::= WHILE                           {:  maquinaHoc.code3(whilecode,STOP,STOP);  :}
        ;

if      ::= IF                              {:  maquinaHoc.code(ifcode);
                                                maquinaHoc.code3(STOP,STOP,STOP);
                                            :}
        ;

end     ::=                                 {:   maquinaHoc.code(STOP);  :}
        ;

stmtlist ::= stmt
        | stmtlist stmt                     
        ;

expr    ::= NUM:n                           {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = n;

                                                RESULT = maquinaHoc.code2(ins1,ins2);
                                            :}
        | VAR:v                             {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.VARPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = v;

                                                InstrucProgram ins3 =  new InstrucProgram();
                                                ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins3.Instruc = EnumInstrMaq.EVAL;

                                                RESULT = maquinaHoc.code3(ins1,ins2,ins3);
                                            :}
        | CONST_PRED:n                      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.CONSTPUSH;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                                ins2.symbolHoc = n;

                                                RESULT = maquinaHoc.code2(ins1,ins2);
                                            :}
        | asgn:valAsgn                      {:  RESULT = valAsgn; :}
        | expr opSUMA expr                  {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.ADD;
                                                RESULT = maquinaHoc.code(ins1);
                                            :}
        | expr opRESTA expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.SUB;
                                                RESULT = maquinaHoc.code(ins1);
                                            :}
        | expr opMULT expr                  {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.MUL;
                                                RESULT = maquinaHoc.code(ins1);
                                            :}
        | expr opDIV expr                   {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.DIV;
                                                RESULT = maquinaHoc.code(ins1);
                                            :}
        | ParIzq expr:e ParDer              {:  RESULT = e; :}
        | BLTIN:fun ParIzq expr ParDer      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.BLTIN;

                                                InstrucProgram ins2 =  new InstrucProgram();
                                                ins2.TipInstr = EnumTipoInstr.BLTIN;
                                                ins2.func_BLTIN = fun.FuncPredef;

                                                RESULT = maquinaHoc.code2(ins1,ins2);
                                            :}
        | opRESTA expr                      {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.NEGATE;
                                                RESULT = maquinaHoc.code(ins1);
                                            :} %prec UMINUS
        | expr POW expr                     {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.POWER;
                                                RESULT = maquinaHoc.code(ins1);
                                            :}
        | expr:ind1 GT expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.GT;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 GE expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.GE;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 LT expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.LT;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 LE expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.LE;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 EQ expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.EQ;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 NE expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.NE;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 OR expr                 {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.OR;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | expr:ind1 AND expr                {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.AND;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        | NOT expr:ind1                     {:  InstrucProgram ins1 =  new InstrucProgram();
                                                ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                                ins1.Instruc = EnumInstrMaq.NOT;
                                                maquinaHoc.code(ins1);
                                                RESULT = ind1;
                                            :}
        ;